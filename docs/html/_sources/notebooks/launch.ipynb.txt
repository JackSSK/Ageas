{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Launch AGEAS\n",
    "\n",
    "This notebook demonstrate how to use ageas.Launch() in extracting key genomic features from Gene Expression Matrices(GEMs) containing RNA-seq based gene counts data of different sample groups.\n",
    "\n",
    "Currently, AGEAS support data under two different formats:\n",
    "\n",
    "1. Dataframe under CSV or TXT format with rows representing genes and columns representing samples, which should looks like:\n",
    "\n",
    "\n",
    "\n",
    "   |                 | SRR1039509 | SRR1039512 | SRR1039513 | SRR1039516 | SRR1039508 |\n",
    "   |-----------------|------------|------------|------------|------------|------------|\n",
    "   | ENSG00000000003 | 679        | 448        | 873        | 408        | 1138       |\n",
    "   | ENSG00000000005 | 0          | 0          | 0          | 0          | 0          |\n",
    "   | ENSG00000000419 | 467        | 515        | 621        | 365        | 587        |\n",
    "   | ENSG00000000457 | 260        | 211        | 263        | 164        | 245        |\n",
    "   | ENSG00000000460 | 60         | 55         | 40         | 35         | 78         |\n",
    "   | ENSG00000000938 | 0          | 0          | 2          | 0          | 1          |\n",
    "\n",
    "   \n",
    "\n",
    "   Genes must either be named with Gene Symbols or Ensembl Gene IDs.\n",
    "\n",
    "   There is no requirement for sample name type. Barcodes, numbers, any artificial names can work.\n",
    "\n",
    "\n",
    "2. Market Exchange Format (MEX) output by [cellranger](https://github.com/10XGenomics/cellranger) pipeline. For more information: \n",
    "   https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/output/matrices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import ageas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## First example:\n",
    "\n",
    "Extract key genomic factors to perform cell reprogramming from Mouse Embryonic Fibroblast(MEF) into Induced Pluripotent Stem Cell(iPSC), one of the most well known cell reprogramming case, with AGEAS.\n",
    "\n",
    "Here, we can use scRNA-seq data published as [GSE103221](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE103221).\n",
    "\n",
    "Either raw data in GSE103221_RAW.tar or normalized counts in GSE103221_normalized_counts.csv.gz can be processed with AGEAS.\n",
    "\n",
    "For using raw data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_raw = ageas.Launch(\n",
    "\tgroup1_path = '../GSE103221_RAW/GSM3629847_10x_osk_mef.csv.gz',\n",
    "\tgroup2_path = '../GSE103221_RAW/GSM3629848_10x_osk_esc.csv.gz',\n",
    "\tsliding_window_size = 100,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Considering the sample scale of raw data for each group is few thousands, pseudo-samples, which abstracts gene expressions from several distinct samples as continuous expression data in order to calculate gene expression correlations, can be generated with every 100 samples.\n",
    "\n",
    "To decrease computational power requirement, standard deviation filter and differential expression filter can be enhanced with **_std_value_thread (default = 1.0)_** and **_log2fc_thread (default = None)_** correspondingly.\n",
    "\n",
    "To increase result consistency, increasing **_unit_num (default = 2)_** is recommended.\n",
    "\n",
    "For more API information, please visit [documentaion page](https://nkmtmsys.github.io/Ageas/html/generated/ageas.Launch.html#ageas.Launch).\n",
    "\n",
    "Below is test_raw with modifications:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_raw = ageas.Launch(\n",
    "\tgroup1_path = '../GSE103221_RAW/GSM3629847_10x_osk_mef.csv.gz',\n",
    "\tgroup2_path = '../GSE103221_RAW/GSM3629848_10x_osk_esc.csv.gz',\n",
    "\tlog2fc_thread = 1.0,\n",
    "\tstd_value_thread = 3.0,\n",
    "\tsliding_window_size = 100,\n",
    "\tunit_num = 4,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Extraction reports can be saved as files with:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_raw.save_reports(\n",
    "\tfolder_path = '../report_files/',\n",
    "\tsave_unit_reports = True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Within folder *report_files*. there should have following files:\n",
    "```bash\n",
    "report_files/\n",
    "    ├─ no_1/\n",
    "    │  ├─ grps_importances.txt\n",
    "    │  ├─ outlier_grps.js\n",
    "    ├─ no_2/\n",
    "    ├─ no_3/\n",
    "    ├─ no_4/\n",
    "    │\n",
    "    ├─ key_atlas.js\n",
    "    ├─ metaGRN.js\n",
    "    ├─ meta_report.csv\n",
    "    ├─ psGRNs.js\n",
    "    ├─ report.csv\n",
    "```\n",
    "\n",
    "Folders ***no_1***, ***no_2***, ***no_3***, ***no_4*** contain key Gene Regulatory Pathways(GRPs) extracted by each extractor unit as ***grps_importances.txt*** which has top ranked GRPs with importance scores and ***outlier_grps.js*** which has GRPs once removed during feature selection due to extremly high importance score.\n",
    "\n",
    "***metaGRN.js*** contains meta-level processed Gene Regulatory Networks(GRN) cast with all data in each sample group.\n",
    "\n",
    "***psGRNs.js*** contains GRNs cast with each pseudo-samples.\n",
    "\n",
    "***key_atlas.js*** contains regulons cast with all of the key GRPs extracted and bridge GRPs which can connect separate regulons to form larger network.\n",
    "\n",
    "***meta_report.csv*** is generated only with meta-GRN.\n",
    "\n",
    "***report.csv*** is generated with ***key_atlas.js***.\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.13 64-bit (windows store)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "2a9e64e061ab733f2e33056f37bf3f62a8dd02da99810729dff6b17cfb3a5e9f"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
